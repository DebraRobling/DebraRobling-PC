# This workflow provides secure RDP access via Tailscale.
#
# It includes:
# - Secure RDP user "RDP" with a masked password.
# - Secure RDP settings (NLA and TLS enabled by default).
# - No public firewall rules.
# - Installation of Google Chrome, Mozilla Firefox, Opera, Brave, and Vivaldi.
# - Installation of the *latest stable* Tailscale client.

name: Secure RDP via Tailscale 2

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360 # 6 hours

    steps:
      - name: Enable RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Restart-Service -Name TermService -Force
          Write-Host "Remote Desktop has been enabled (secure defaults)."

      - name: Create RDP User with Secure Password
        run: |
          # 1. Generate a complex password
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          
          # 2. CRITICAL: Mask the password in GitHub logs
          echo "::add-mask::$password"
          
          # 3. Create the user
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          # 4. Save the password for the final step
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }
          Write-Host "User 'RDP' created and added to Administrators."

      - name: Install Browsers (Chrome, Firefox, Opera, Brave, Vivaldi)
        run: |
          Write-Host "Installing Google Chrome..."
          winget install --id Google.Chrome -e --accept-package-agreements --source winget
          
          Write-Host "Installing Mozilla Firefox..."
          winget install --id Mozilla.Firefox -e --accept-package-agreements --source winget
          
          Write-Host "Installing Opera..."
          winget install --id Opera.Opera -e --accept-package-agreements --source winget
          
          Write-Host "Installing Brave..."
          winget install --id Brave.Brave -e --accept-package-agreements --source winget
          
          Write-Host "Installing Vivaldi..."
          winget install --id Vivaldi.Vivaldi -e --accept-package-agreements --source winget
          
          Write-Host "All browsers installed."

      - name: Install Latest Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.msi"
          $installerPath = "$env:TEMP\tailscale-latest.msi"
          
          Write-Host "Downloading latest Tailscale from $tsUrl..."
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          
          Write-Host "Installing Tailscale..."
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          
          Remove-Item $installerPath -Force
          Write-Host "Tailscale installed."

      - name: Establish Tailscale Connection
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tailscaleExe)) {
            $tailscaleExe = "$env:ProgramFiles(x86)\Tailscale\tailscale.exe"
          }
          if (-not (Test-Path $tailscaleExe)) {
             Write-Error "Could not find tailscale.exe"
             exit 1
          }

          Write-Host "Bringing up Tailscale..."
          & $tailscaleExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = & $tailscaleExe ip -4
              if (-not $tsIP) {
                Write-Host "Waiting for Tailscale IP... (Attempt $($retries+1)/12)"
                Start-Sleep -Seconds 5
                $retries++
              }
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned after 60 seconds. Exiting."
              & $tailscaleExe status
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale connection established. IP: $tsIP"
      
      - name: RDP Connection Ready
        run: |
          Write-Host "`n"
          Write-Host "================ RDP ACCESS READY ================"
          Write-Host "Connect to the following Tailscale IP:"
          Write-Host "Address:  $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "=================================================="
          Write-Host "`nThis workflow will remain active for up to 6 hours."
          
          Start-Sleep -Seconds 21600

