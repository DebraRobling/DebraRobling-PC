name: RDP 3

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Generate Tailscale Auth Key via API
        run: |
          # Get OAuth token
          $tokenResponse = Invoke-WebRequest -Uri "https://api.tailscale.com/api/v2/oauth/token" `
            -Method POST `
            -ContentType "application/x-www-form-urlencoded" `
            -Body "client_id=${{ secrets.TS_OAUTH_CLIENT_ID }}&client_secret=${{ secrets.TS_OAUTH_SECRET }}" `
            -UseBasicParsing
          
          $tokenData = $tokenResponse.Content | ConvertFrom-Json
          $apiToken = $tokenData.access_token
          
          Write-Host "Token obtained: $($apiToken.Substring(0,10))..."
          
          # Create auth key payload - SIMPLIFIED
          $capabilities = @{
              devices = @{
                  create = @{
                      reusable = $true
                      ephemeral = $true
                      preauthorized = $true
                  }
              }
          }
          
          $payload = @{
              capabilities = $capabilities
              expirySeconds = 3600
              description = "GitHub RDP Runner"
          }
          
          $jsonPayload = $payload | ConvertTo-Json -Depth 10
          Write-Host "Payload: $jsonPayload"
          
          # Generate auth key
          $authKeyResponse = Invoke-WebRequest -Uri "https://api.tailscale.com/api/v2/tailnet/-/keys" `
            -Method POST `
            -Headers @{Authorization = "Bearer $apiToken"} `
            -ContentType "application/json" `
            -Body $jsonPayload `
            -UseBasicParsing
          
          $authKeyData = $authKeyResponse.Content | ConvertFrom-Json
          $authKey = $authKeyData.key
          
          if (-not $authKey) {
              Write-Error "Failed to generate auth key"
              Write-Host "Response: $($authKeyResponse.Content)"
              exit 1
          }
          
          Write-Host "Auth key generated successfully"
          echo "TAILSCALE_AUTH_KEY=$authKey" >> $env:GITHUB_ENV

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User with Fixed Password
        run: |
          $password = "T9x!K2m@Pq7#Zn4$Wv8&Lr3%"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.90.1-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID --tags=tag:gitrd
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
